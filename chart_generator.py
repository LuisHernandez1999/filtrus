"""
M√≥dulo para gera√ß√£o de gr√°ficos - Vers√£o Ultra Profissional com An√°lise Temporal
"""

import os
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import matplotlib
import seaborn as sns
from matplotlib.patches import Rectangle, FancyBboxPatch
from datetime import datetime, timedelta
from typing import List, Optional
import subprocess
import platform
import numpy as np

from styles import MATPLOTLIB_CONFIG, CORES_TIPO, CORES_PA, GRAFICO_CONFIG, THEME_COLORS, MESES_PT
from config import TOP_MOTORISTAS, TIPOS_DESCONSIDERAR

# Configurar matplotlib para n√£o usar GUI quando necess√°rio
matplotlib.use('Agg')

# Configurar Seaborn para design ultra profissional
sns.set_style("whitegrid")


class ChartGenerator:
    """Classe respons√°vel pela gera√ß√£o de gr√°ficos ultra profissionais com an√°lise temporal"""
    
    def __init__(self):
        self._configurar_matplotlib()
        self._configurar_seaborn()
    
    def _configurar_matplotlib(self):
        """Configura o estilo do matplotlib"""
        plt.style.use('default')
        for key, value in MATPLOTLIB_CONFIG.items():
            plt.rcParams[key] = value
    
    def _configurar_seaborn(self):
        """Configura o estilo do Seaborn para design ultra profissional"""
        sns.set_context("notebook", font_scale=1.0)
        sns.set_style("whitegrid", {
            "axes.spines.left": True,
            "axes.spines.bottom": True,
            "axes.spines.top": False,
            "axes.spines.right": False,
            "axes.grid": True,
            "grid.color": "#f5f5f5",
            "grid.linewidth": 0.5,
            "axes.edgecolor": "#cccccc",
            "axes.linewidth": 1,
        })
        
        # Paleta ultra profissional - M√ÅXIMA VARIA√á√ÉO DE CORES (sem tons similares)
        self.cores_profissionais = [
            "#DC2626",  # Vermelho forte
            "#16A34A",  # Verde forte  
            "#2563EB",  # Azul forte (APENAS 1 azul)
            "#7C3AED",  # Roxo forte
            "#EA580C",  # Laranja forte
            "#059669",  # Verde esmeralda (diferente do verde)
            "#BE185D",  # Rosa forte
            "#92400E",  # Marrom forte
            "#374151",  # Cinza escuro
            "#7F1D1D",  # Vermelho escuro (diferente do vermelho)
            "#581C87",  # Roxo escuro (diferente do roxo)
            "#166534",  # Verde escuro (diferente dos verdes)
            "#9A3412",  # Laranja escuro (diferente do laranja)
            "#1F2937",  # Cinza muito escuro
            "#7E22CE"   # Roxo m√©dio (diferente dos roxos)
        ]
        
        # Cores para pizza - M√ÅXIMA VARIA√á√ÉO (cada cor bem diferente)
        self.cores_pizza_pro = [
            "#DC2626",  # Vermelho
            "#16A34A",  # Verde
            "#7C3AED",  # Roxo
            "#EA580C",  # Laranja
            "#BE185D",  # Rosa
            "#059669",  # Verde esmeralda
            "#92400E",  # Marrom
            "#374151",  # Cinza escuro
            "#7F1D1D",  # Vermelho escuro
            "#166534"   # Verde escuro
        ]
        
        # Cores para motoristas - gradiente de risco (vermelho = mais alertas)
        self.cores_motoristas_pro = [
            "#DC2626",  # Vermelho (pior)
            "#EA580C",  # Laranja
            "#CA8A04",  # Amarelo escuro
            "#16A34A",  # Verde (neutro)
            "#059669",  # Verde esmeralda
            "#7C3AED",  # Roxo
            "#2563EB"   # Azul (melhor)
        ]
    
    def _formatar_data_portugues(self, data: datetime) -> str:
        """
        Formata data em portugu√™s
        
        Args:
            data: Objeto datetime
            
        Returns:
            String com data formatada em portugu√™s
        """
        data_formatada = data.strftime("%d de %B de %Y")
        for eng, pt in MESES_PT.items():
            data_formatada = data_formatada.replace(eng, pt)
        return data_formatada
    
    def _abrir_arquivo(self, caminho: str):
        """Abre o arquivo no sistema operacional padr√£o"""
        try:
            if platform.system() == 'Darwin':  # macOS
                subprocess.call(('open', caminho))
            elif platform.system() == 'Windows':  # Windows
                os.startfile(caminho)
            else:  # Linux
                subprocess.call(('xdg-open', caminho))
            print(f"üìä Gr√°fico aberto automaticamente: {os.path.basename(caminho)}")
        except Exception as e:
            print(f"‚ö†Ô∏è N√£o foi poss√≠vel abrir o gr√°fico automaticamente: {e}")
    
    def _processar_dados_temporais(self, df_geral: pd.DataFrame):
        """
        Processa dados temporais para an√°lise de tend√™ncias
        
        Args:
            df_geral: DataFrame com todos os dados
            
        Returns:
            DataFrame processado com an√°lise temporal
        """
        try:
            # Verificar se existe coluna DATA
            colunas_data_possiveis = ['DATA', 'Date', 'data', 'DATA_OCORRENCIA', 'DATA_ALERTA']
            coluna_data = None
            
            for col in colunas_data_possiveis:
                if col in df_geral.columns:
                    coluna_data = col
                    break
            
            if coluna_data is None:
                print("‚ö†Ô∏è Nenhuma coluna de data encontrada. Criando dados temporais simulados...")
                # Criar datas simuladas baseadas no √≠ndice
                data_inicio = datetime.now() - timedelta(days=len(df_geral))
                df_geral['DATA_PROCESSADA'] = [data_inicio + timedelta(days=i) for i in range(len(df_geral))]
            else:
                # Processar coluna de data existente
                print(f"üìÖ Processando coluna de data: {coluna_data}")
                df_geral['DATA_PROCESSADA'] = pd.to_datetime(df_geral[coluna_data], errors='coerce')
                
                # Remover registros com data inv√°lida
                df_geral = df_geral.dropna(subset=['DATA_PROCESSADA'])
            
            # Agrupar por PA e data
            df_temporal = df_geral.groupby(['PA', df_geral['DATA_PROCESSADA'].dt.date]).size().reset_index()
            df_temporal.columns = ['PA', 'DATA', 'QUANTIDADE']
            df_temporal['DATA'] = pd.to_datetime(df_temporal['DATA'])
            
            return df_temporal
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro no processamento temporal: {e}")
            return pd.DataFrame()
    
    def _calcular_tendencias(self, df_temporal: pd.DataFrame):
        """
        Calcula tend√™ncias de aumento/diminui√ß√£o para cada PA
        
        Args:
            df_temporal: DataFrame com dados temporais
            
        Returns:
            Dict com an√°lise de tend√™ncias por PA
        """
        tendencias = {}
        
        try:
            for pa in df_temporal['PA'].unique():
                df_pa = df_temporal[df_temporal['PA'] == pa].sort_values('DATA')
                
                if len(df_pa) < 2:
                    continue
                
                # Dividir em duas metades para compara√ß√£o
                meio = len(df_pa) // 2
                primeira_metade = df_pa.iloc[:meio]['QUANTIDADE'].mean()
                segunda_metade = df_pa.iloc[meio:]['QUANTIDADE'].mean()
                
                # Calcular varia√ß√£o percentual
                if primeira_metade > 0:
                    variacao = ((segunda_metade - primeira_metade) / primeira_metade) * 100
                else:
                    variacao = 0
                
                # Determinar tend√™ncia
                if variacao > 10:
                    status = "AUMENTO SIGNIFICATIVO"
                    cor = "#DC2626"  # Vermelho
                    icone = "üìà"
                elif variacao > 5:
                    status = "AUMENTO MODERADO"
                    cor = "#EA580C"  # Laranja
                    icone = "üìä"
                elif variacao < -10:
                    status = "REDU√á√ÉO SIGNIFICATIVA"
                    cor = "#16A34A"  # Verde
                    icone = "üìâ"
                elif variacao < -5:
                    status = "REDU√á√ÉO MODERADA"
                    cor = "#059669"  # Verde esmeralda
                    icone = "üìä"
                else:
                    status = "EST√ÅVEL"
                    cor = "#374151"  # Cinza
                    icone = "‚ûñ"
                
                tendencias[pa] = {
                    'variacao': variacao,
                    'status': status,
                    'cor': cor,
                    'icone': icone,
                    'total': df_pa['QUANTIDADE'].sum(),
                    'media': df_pa['QUANTIDADE'].mean(),
                    'primeira_metade': primeira_metade,
                    'segunda_metade': segunda_metade
                }
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erro no c√°lculo de tend√™ncias: {e}")
        
        return tendencias
    
    def _criar_grafico_temporal_ultra_profissional(self, fig, ax5, df_geral: pd.DataFrame):
        """Cria gr√°fico de an√°lise temporal ultra profissional"""
        try:
            # Processar dados temporais
            df_temporal = self._processar_dados_temporais(df_geral)
            
            if df_temporal.empty:
                self._criar_grafico_vazio(ax5, "AN√ÅLISE TEMPORAL - SEM DADOS", 
                                        "Sem dados temporais v√°lidos")
                return
            
            # Calcular tend√™ncias
            tendencias = self._calcular_tendencias(df_temporal)
            
            # Criar gr√°fico de linha temporal
            pas_unicos = df_temporal['PA'].unique()
            
            for i, pa in enumerate(pas_unicos):
                df_pa = df_temporal[df_temporal['PA'] == pa].sort_values('DATA')
                
                if len(df_pa) > 0:
                    cor = self.cores_profissionais[i % len(self.cores_profissionais)]
                    
                    # Linha principal
                    ax5.plot(df_pa['DATA'], df_pa['QUANTIDADE'], 
                            color=cor, linewidth=3, marker='o', markersize=6,
                            label=f"{pa}", alpha=0.8)
                    
                    # √Årea sob a curva para destaque
                    ax5.fill_between(df_pa['DATA'], df_pa['QUANTIDADE'], 
                                   alpha=0.2, color=cor)
            
            # T√≠tulo ultra profissional
            ax5.set_title('üìÖ AN√ÅLISE TEMPORAL DE INCIDENTES POR PA', 
                        fontsize=18, fontweight='bold', pad=30, color='black')
            
            # Labels dos eixos
            ax5.set_ylabel('Quantidade de Alertas por Dia', fontsize=14, fontweight='bold', 
                          color='black', labelpad=10)
            ax5.set_xlabel('Per√≠odo de An√°lise', fontsize=14, fontweight='bold', 
                          color='black', labelpad=10)
            
            # Formata√ß√£o do eixo X (datas)
            ax5.xaxis.set_major_formatter(mdates.DateFormatter('%d/%m'))
            ax5.xaxis.set_major_locator(mdates.DayLocator(interval=max(1, len(df_temporal['DATA'].unique()) // 10)))
            plt.setp(ax5.xaxis.get_majorticklabels(), rotation=45, ha='right')
            
            # Grid ultra profissional
            ax5.grid(True, linestyle="--", alpha=0.3, color='#e2e8f0', linewidth=1)
            ax5.set_axisbelow(True)
            
            # Legenda com informa√ß√µes de tend√™ncia
            legend_labels = []
            for pa in pas_unicos:
                if pa in tendencias:
                    tend = tendencias[pa]
                    legend_labels.append(f"{pa} {tend['icone']} ({tend['variacao']:+.1f}%)")
                else:
                    legend_labels.append(pa)
            
            # Atualizar labels da legenda
            handles, _ = ax5.get_legend_handles_labels()
            legend = ax5.legend(handles, legend_labels, 
                              bbox_to_anchor=(1.02, 1), loc='upper left', 
                              fontsize=10, frameon=True, title="üìä PAs e Tend√™ncias",
                              title_fontsize=11, borderpad=1.2)
            legend.get_title().set_fontweight('bold')
            legend.get_title().set_color('black')
            legend.get_frame().set_facecolor('#f8fafc')
            legend.get_frame().set_edgecolor('#1e40af')
            legend.get_frame().set_linewidth(2)
            legend.get_frame().set_alpha(0.95)
            
            # Adicionar caixa de resumo de tend√™ncias
            if tendencias:
                texto_resumo = "RESUMO DE TEND√äNCIAS:\n"
                for pa, dados in tendencias.items():
                    texto_resumo += f"{dados['icone']} {pa}: {dados['status']} ({dados['variacao']:+.1f}%)\n"
                
                ax5.text(0.02, 0.98, texto_resumo, 
                        transform=ax5.transAxes, fontsize=9, 
                        verticalalignment='top', horizontalalignment='left',
                        bbox=dict(boxstyle="round,pad=0.8", facecolor='white', 
                                edgecolor='#1e40af', alpha=0.95, linewidth=2),
                        fontweight='bold', color='black')
            
            # Fundo ultra clean
            ax5.set_facecolor('#fefefe')
            
            # Formata√ß√£o dos eixos premium
            ax5.tick_params(axis='x', labelsize=10, colors='black', pad=8)
            ax5.tick_params(axis='y', labelsize=11, colors='black', pad=8)
            
            # Bordas ultra profissionais
            ax5.spines['top'].set_visible(False)
            ax5.spines['right'].set_visible(False)
            ax5.spines['left'].set_color('#cbd5e1')
            ax5.spines['bottom'].set_color('#cbd5e1')
            ax5.spines['left'].set_linewidth(1.5)
            ax5.spines['bottom'].set_linewidth(1.5)
            
            print(f"‚úÖ Gr√°fico temporal criado com {len(tendencias)} PAs analisados")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro no gr√°fico temporal: {e}")
            self._criar_grafico_vazio(ax5, "AN√ÅLISE TEMPORAL - ERRO", 
                                    f"Erro no processamento: {str(e)}")
    
    def _criar_header_com_subtitulo_estatisticas(self, fig, ax_header, df_geral: pd.DataFrame, data_atual: datetime):
        """Cria o cabe√ßalho ultra profissional com estat√≠sticas como subt√≠tulo"""
        ax_header.axis('off')
        
        data_formatada = self._formatar_data_portugues(data_atual)
        hora_formatada = data_atual.strftime("%H:%M")
        
        # T√≠tulo principal ultra profissional (SEM CAIXA AZUL)
        ax_header.text(0.5, 0.5, 'üìä RELAT√ìRIO EXECUTIVO DE AN√ÅLISE DE ALERTAS COM TEND√äNCIAS TEMPORAIS', 
                      ha='center', va='center', fontsize=22, fontweight='bold', 
                      color='black', transform=ax_header.transAxes)
    
        # Data no canto superior direito de forma harm√¥nica
        ax_header.text(0.95, 0.8, f'üìÖ {data_formatada}\nüïí {hora_formatada}', 
                      ha='right', va='top', fontsize=11, 
                      color='#64748b', transform=ax_header.transAxes, 
                      fontweight='medium')
    
    def _criar_grafico_tipos_ultra_profissional(self, fig, ax1, df_geral: pd.DataFrame):
        """Cria gr√°fico de distribui√ß√£o por tipos ultra profissional com detalhes premium"""
        if "TIPO" not in df_geral.columns:
            self._criar_grafico_vazio(ax1, "DISTRIBUI√á√ÉO DE ALERTAS - COLUNA TIPO N√ÉO ENCONTRADA", 
                                    "Coluna TIPO n√£o encontrada nos dados")
            return
        
        try:
            # Limpar e filtrar dados de TIPO
            df_geral["TIPO"] = df_geral["TIPO"].astype(str).str.strip()
            df_geral = df_geral[df_geral["TIPO"] != "nan"]
            df_geral = df_geral[~df_geral["TIPO"].isin(TIPOS_DESCONSIDERAR)]
            
            if df_geral.empty:
                self._criar_grafico_vazio(ax1, "DISTRIBUI√á√ÉO DE ALERTAS - SEM DADOS V√ÅLIDOS", 
                                        "Sem dados v√°lidos ap√≥s filtros")
                return
            
            tipo_contagem = df_geral.groupby(["PA", "TIPO"]).size().unstack(fill_value=0)
            if tipo_contagem.empty:
                self._criar_grafico_vazio(ax1, "DISTRIBUI√á√ÉO DE ALERTAS - SEM CATEGORIAS", 
                                        "Sem dados de categoria v√°lidos")
                return
            
            # Preparar dados para Seaborn
            df_plot = tipo_contagem.reset_index()
            df_melted = df_plot.melt(id_vars=['PA'], var_name='TIPO', value_name='Quantidade')
            
            # Criar gr√°fico de barras agrupadas FINAS com cores profissionais
            sns.barplot(data=df_melted, x='PA', y='Quantidade', hue='TIPO', 
                       ax=ax1, palette=self.cores_profissionais, 
                       edgecolor='white', linewidth=2, width=0.6)  # Barras mais finas
            
            # T√≠tulo ultra profissional SEM caixa
            ax1.set_title('üìä DISTRIBUI√á√ÉO DE ALERTAS POR CATEGORIA E POSTO', 
                        fontsize=16, fontweight='bold', pad=25, color='black')
            
            # Labels dos eixos ultra profissionais
            ax1.set_ylabel('Quantidade de Alertas', fontsize=12, fontweight='bold', 
                          color='black', labelpad=8)
            ax1.set_xlabel('Posto de Atendimento (PA)', fontsize=12, fontweight='bold', 
                          color='black', labelpad=8)
            
            # Grid ultra profissional
            ax1.grid(axis="y", linestyle="-", alpha=0.25, color='#e2e8f0', linewidth=1)
            ax1.set_axisbelow(True)
            
            # Formata√ß√£o dos eixos premium
            ax1.tick_params(axis='x', rotation=0, labelsize=10, colors='black', pad=6)
            ax1.tick_params(axis='y', labelsize=9, colors='black', pad=6)
            
            # Legenda ultra profissional
            legend = ax1.legend(bbox_to_anchor=(1.02, 1), loc='upper left', 
                              fontsize=9, frameon=True, title="üìã Categorias",
                              title_fontsize=10, borderpad=1.0, columnspacing=1.0)
            legend.get_title().set_fontweight('bold')
            legend.get_title().set_color('black')
            legend.get_frame().set_facecolor('#f8fafc')
            legend.get_frame().set_edgecolor('#1e40af')
            legend.get_frame().set_linewidth(2)
            legend.get_frame().set_alpha(0.95)
            
            # Fundo ultra clean
            ax1.set_facecolor('#fefefe')
            
            # Bordas ultra profissionais
            ax1.spines['top'].set_visible(False)
            ax1.spines['right'].set_visible(False)
            ax1.spines['left'].set_color('#cbd5e1')
            ax1.spines['bottom'].set_color('#cbd5e1')
            ax1.spines['left'].set_linewidth(1.5)
            ax1.spines['bottom'].set_linewidth(1.5)
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro no gr√°fico de tipos: {e}")
            self._criar_grafico_vazio(ax1, "DISTRIBUI√á√ÉO DE ALERTAS - ERRO", 
                                    f"Erro no processamento: {str(e)}")
    
    def _criar_grafico_pizza_ultra_profissional(self, fig, ax2, df_geral: pd.DataFrame):
        """Cria gr√°fico de pizza ultra profissional com detalhes premium"""
        try:
            pa_contagem = df_geral.groupby("PA").size().sort_values(ascending=False)
            if pa_contagem.empty:
                self._criar_grafico_vazio(ax2, "VOLUME TOTAL DE ALERTAS - SEM DADOS", 
                                        "Sem dados v√°lidos para an√°lise")
                return
            
            # Criar gr√°fico de pizza ultra profissional
            wedges, texts, autotexts = ax2.pie(pa_contagem.values, 
                                             labels=pa_contagem.index,
                                             colors=self.cores_pizza_pro[:len(pa_contagem)],
                                             autopct='%1.1f%%',
                                             startangle=90,
                                             explode=[0.04] * len(pa_contagem),  # Separa√ß√£o elegante
                                             shadow=True,  # Sombra profissional
                                             textprops={'fontsize': 10, 'fontweight': 'bold'})
            
            # Configurar textos ultra profissionais
            for text in texts:
                text.set_color('black')
                text.set_fontsize(11)
                text.set_fontweight('bold')
                text.set_bbox(dict(boxstyle="round,pad=0.3", facecolor='white', 
                                 edgecolor='#64748b', alpha=0.9, linewidth=1.5))
            
            for autotext in autotexts:
                autotext.set_color('white')
                autotext.set_fontsize(10)
                autotext.set_fontweight('bold')
                autotext.set_bbox(dict(boxstyle="round,pad=0.2", facecolor='black', alpha=0.8))
            
            # T√≠tulo ultra profissional SEM caixa
            ax2.set_title('üìä VOLUME TOTAL DE ALERTAS POR POSTO', 
                        fontsize=16, fontweight='bold', pad=25, color='black')
            
            # Garantir c√≠rculo perfeito
            ax2.axis('equal')
            
            # Adicionar estat√≠sticas no centro ultra profissionais
            total = pa_contagem.sum()
            ax2.text(0, 0, f'TOTAL\n{total:,}\nAlertas', 
                    ha='center', va='center', fontsize=14, fontweight='bold',
                    color='#1e40af',
                    bbox=dict(boxstyle="round,pad=0.5", facecolor='white', 
                             edgecolor='#1e40af', alpha=0.95, linewidth=3))
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro no gr√°fico de pizza: {e}")
            self._criar_grafico_vazio(ax2, "VOLUME TOTAL DE ALERTAS - ERRO", 
                                    f"Erro no processamento: {str(e)}")
    
    def _criar_grafico_motoristas_ultra_profissional(self, fig, ax3, df_geral: pd.DataFrame):
        """Cria gr√°fico dos top motoristas ultra profissional com barras horizontais"""
        try:
            if "MOTORISTA" not in df_geral.columns:
                self._criar_grafico_vazio(ax3, "TOP MOTORISTAS - COLUNA N√ÉO ENCONTRADA", 
                                        "Coluna MOTORISTA n√£o encontrada")
                return
        
            # Limpar dados de motorista
            df_geral["MOTORISTA"] = df_geral["MOTORISTA"].astype(str).str.strip()
            df_motoristas = df_geral[df_geral["MOTORISTA"] != "nan"]
            df_motoristas = df_motoristas[df_motoristas["MOTORISTA"] != ""]
        
            if df_motoristas.empty:
                self._criar_grafico_vazio(ax3, "TOP MOTORISTAS - SEM DADOS", 
                                        "Sem dados v√°lidos de motoristas")
                return
        
            # Contar alertas por motorista e pegar os top 7
            motorista_contagem = df_motoristas.groupby("MOTORISTA").size().sort_values(ascending=False).head(TOP_MOTORISTAS)
        
            if motorista_contagem.empty:
                self._criar_grafico_vazio(ax3, "TOP MOTORISTAS - SEM DADOS", 
                                        "Nenhum motorista encontrado")
                return
        
            # Preparar dados para Seaborn
            df_motoristas_plot = motorista_contagem.reset_index()
            df_motoristas_plot.columns = ['Motorista', 'Alertas']
            df_motoristas_plot = df_motoristas_plot.sort_values('Alertas', ascending=True)
        
            # Criar gr√°fico horizontal FINO com cores profissionais
            bars = sns.barplot(data=df_motoristas_plot, y='Motorista', x='Alertas', 
                             ax=ax3, palette=self.cores_motoristas_pro, 
                             edgecolor='white', linewidth=2)
        
            # Ajustar altura das barras (mais finas)
            for bar in bars.patches:
                bar.set_height(0.5)  # Barras mais finas
        
            # Configurar eixos com nomes truncados profissionalmente
            labels = [nome[:20] + '...' if len(nome) > 20 else nome 
                     for nome in df_motoristas_plot['Motorista']]
            ax3.set_yticklabels(labels, fontsize=9)
        
            # T√≠tulo ultra profissional SEM caixa
            ax3.set_title('üöó TOP 7 MOTORISTAS COM MAIS ALERTAS', 
                        fontsize=16, fontweight='bold', pad=25, color='black')
        
            # Labels dos eixos ultra profissionais
            ax3.set_xlabel('N√∫mero de Alertas', fontsize=12, fontweight='bold', 
                          color='black', labelpad=8)
            ax3.set_ylabel('Motoristas', fontsize=12, fontweight='bold', 
                          color='black', labelpad=8)
        
            # Grid ultra profissional
            ax3.grid(axis="x", linestyle="--", alpha=0.25, color='#e2e8f0', linewidth=1)
            ax3.set_axisbelow(True)
        
            # Adicionar valores nas barras com estilo ultra profissional
            for i, (motorista, valor) in enumerate(df_motoristas_plot.values):
                color = '#dc2626' if i == len(df_motoristas_plot) - 1 else '#1e40af'
                ax3.text(valor + max(df_motoristas_plot['Alertas']) * 0.02, i, 
                       f'{valor}', ha='left', va='center', 
                       fontsize=10, fontweight='bold', color=color,
                       bbox=dict(boxstyle="round,pad=0.3", facecolor='white', 
                                edgecolor=color, alpha=0.95, linewidth=1.5))
        
            # Fundo ultra clean
            ax3.set_facecolor('#fefefe')
        
            # Formata√ß√£o dos eixos premium
            ax3.tick_params(axis='x', labelsize=9, colors='black', pad=6)
            ax3.tick_params(axis='y', labelsize=8, colors='black', pad=6)
        
            # Bordas ultra profissionais
            ax3.spines['top'].set_visible(False)
            ax3.spines['right'].set_visible(False)
            ax3.spines['left'].set_color('#cbd5e1')
            ax3.spines['bottom'].set_color('#cbd5e1')
            ax3.spines['left'].set_linewidth(1.5)
            ax3.spines['bottom'].set_linewidth(1.5)
        
        except Exception as e:
            print(f"‚ö†Ô∏è Erro no gr√°fico de motoristas: {e}")
            self._criar_grafico_vazio(ax3, "TOP MOTORISTAS - ERRO", 
                                    f"Erro no processamento: {str(e)}")
    
    def _criar_grafico_tipos_motoristas_ultra_profissional(self, fig, ax4, df_geral: pd.DataFrame):
        """Cria gr√°fico dos tipos de alertas dos top motoristas ultra profissional com detalhes premium"""
        try:
            if "MOTORISTA" not in df_geral.columns or "TIPO" not in df_geral.columns:
                self._criar_grafico_vazio(ax4, "TIPOS POR MOTORISTA - COLUNAS N√ÉO ENCONTRADAS", 
                                        "Colunas MOTORISTA ou TIPO n√£o encontradas")
                return
            
            # Limpar dados
            df_clean = df_geral.copy()
            df_clean["MOTORISTA"] = df_clean["MOTORISTA"].astype(str).str.strip()
            df_clean["TIPO"] = df_clean["TIPO"].astype(str).str.strip()
            df_clean = df_clean[(df_clean["MOTORISTA"] != "nan") & (df_clean["MOTORISTA"] != "")]
            df_clean = df_clean[(df_clean["TIPO"] != "nan") & (~df_clean["TIPO"].isin(TIPOS_DESCONSIDERAR))]
            
            if df_clean.empty:
                self._criar_grafico_vazio(ax4, "TIPOS POR MOTORISTA - SEM DADOS", 
                                        "Sem dados v√°lidos")
                return
            
            # Pegar top 7 motoristas
            top_motoristas = df_clean.groupby("MOTORISTA").size().sort_values(ascending=False).head(TOP_MOTORISTAS).index
            df_top = df_clean[df_clean["MOTORISTA"].isin(top_motoristas)]
            
            # Contar tipos por motorista
            tipo_motorista = df_top.groupby(["MOTORISTA", "TIPO"]).size().unstack(fill_value=0)
            
            if tipo_motorista.empty:
                self._criar_grafico_vazio(ax4, "TIPOS POR MOTORISTA - SEM DADOS", 
                                        "Sem dados de tipos para top motoristas")
                return
            
            # Criar gr√°fico empilhado FINO com cores profissionais
            bottom = np.zeros(len(tipo_motorista))
            
            for i, tipo in enumerate(tipo_motorista.columns):
                ax4.bar(range(len(tipo_motorista)), tipo_motorista[tipo], 
                       bottom=bottom, label=tipo, 
                       color=self.cores_profissionais[i % len(self.cores_profissionais)],
                       edgecolor='white', linewidth=2, width=0.5)  # Barras mais finas
                bottom += tipo_motorista[tipo]
            
            # T√≠tulo ultra profissional SEM caixa
            ax4.set_title('üìã TIPOS DE ALERTAS DOS TOP MOTORISTAS', 
                        fontsize=16, fontweight='bold', pad=25, color='black')
            
            # Labels dos eixos ultra profissionais
            ax4.set_ylabel('N√∫mero de Alertas', fontsize=12, fontweight='bold', 
                          color='black', labelpad=8)
            ax4.set_xlabel('Motoristas', fontsize=12, fontweight='bold', 
                          color='black', labelpad=8)
            
            # Ajustar labels do eixo x sem sobreposi√ß√£o
            labels = [nome[:10] + '...' if len(nome) > 10 else nome for nome in tipo_motorista.index]
            ax4.set_xticks(range(len(tipo_motorista)))
            ax4.set_xticklabels(labels, rotation=45, ha='right', fontsize=8)
            
            # Grid ultra profissional
            ax4.grid(axis="y", linestyle="--", alpha=0.25, color='#e2e8f0', linewidth=1)
            ax4.set_axisbelow(True)
            
            # Legenda ultra profissional
            legend = ax4.legend(bbox_to_anchor=(1.02, 1), loc='upper left', 
                              fontsize=9, frameon=True, title="üìã Tipos",
                              title_fontsize=10, borderpad=1.0, columnspacing=1.0)
            legend.get_title().set_fontweight('bold')
            legend.get_title().set_color('black')
            legend.get_frame().set_facecolor('#f8fafc')
            legend.get_frame().set_edgecolor('#1e40af')
            legend.get_frame().set_linewidth(2)
            legend.get_frame().set_alpha(0.95)
            
            # Fundo ultra clean
            ax4.set_facecolor('#fefefe')
            
            # Formata√ß√£o dos eixos premium
            ax4.tick_params(axis='x', labelsize=8, colors='black', pad=6)
            ax4.tick_params(axis='y', labelsize=9, colors='black', pad=6)
            
            # Bordas ultra profissionais
            ax4.spines['top'].set_visible(False)
            ax4.spines['right'].set_visible(False)
            ax4.spines['left'].set_color('#cbd5e1')
            ax4.spines['bottom'].set_color('#cbd5e1')
            ax4.spines['left'].set_linewidth(1.5)
            ax4.spines['bottom'].set_linewidth(1.5)
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro no gr√°fico de tipos por motorista: {e}")
            self._criar_grafico_vazio(ax4, "TIPOS POR MOTORISTA - ERRO", 
                                    f"Erro no processamento: {str(e)}")
    
    def _criar_grafico_vazio(self, ax, titulo: str, mensagem: str):
        """Cria um gr√°fico vazio com mensagem ultra profissional"""
        ax.text(0.5, 0.5, mensagem, 
               ha='center', va='center', transform=ax.transAxes,
               fontsize=12, color='black', fontweight='bold',
               bbox=dict(boxstyle="round,pad=0.6", facecolor='#f8fafc', 
                        edgecolor='#1e40af', alpha=0.95, linewidth=2))
        ax.set_title(titulo, color='black', fontsize=14, fontweight='bold', pad=20)
        ax.set_facecolor('#fefefe')
        
        # Remover todos os elementos
        for spine in ax.spines.values():
            spine.set_visible(False)
        ax.set_xticks([])
        ax.set_yticks([])
    
    def gerar_graficos(self, arquivos_filtrados: List[str]) -> Optional[str]:
        """
        Gera gr√°ficos de an√°lise dos dados ultra profissionais com an√°lise temporal
        
        Args:
            arquivos_filtrados: Lista de caminhos dos arquivos Excel filtrados
            
        Returns:
            Caminho do arquivo de gr√°fico gerado ou None se houver erro
        """
        try:
            # Concatenar todos os DataFrames
            df_list = []
            for path in arquivos_filtrados:
                try:
                    df_temp = pd.read_excel(path)
                    df_list.append(df_temp)
                except Exception as e:
                    print(f"‚ö†Ô∏è Erro ao ler {os.path.basename(path)}: {e}")
                    continue
            
            if not df_list:
                print("‚ùå Nenhum arquivo v√°lido encontrado para gerar gr√°ficos")
                return None
                
            df_geral = pd.concat(df_list, ignore_index=True)
            print(f"üìä Dados carregados para gr√°ficos: {len(df_geral)} registros")
            
            if df_geral.empty:
                print("‚ùå Nenhum dado v√°lido encontrado")
                return None
            
            # Configurar figura ultra profissional com 5 gr√°ficos
            fig = plt.figure(figsize=(24, 20), facecolor='white')
            
            # Layout ultra profissional com espa√ßamento para 5 gr√°ficos
            gs = fig.add_gridspec(4, 2, height_ratios=[0.4, 1.8, 1.8, 2.0], width_ratios=[1, 1], 
                                hspace=0.5, wspace=0.4, 
                                left=0.06, right=0.82, top=0.94, bottom=0.06)
            
            data_atual = datetime.now()
            
            # Header ultra profissional com estat√≠sticas como subt√≠tulo
            ax_header = fig.add_subplot(gs[0, :])
            self._criar_header_com_subtitulo_estatisticas(fig, ax_header, df_geral, data_atual)
            
            # Gr√°fico 1: Distribui√ß√£o por tipos (esquerda superior)
            ax1 = fig.add_subplot(gs[1, 0])
            self._criar_grafico_tipos_ultra_profissional(fig, ax1, df_geral)
            
            # Gr√°fico 2: Pizza por PA (direita superior)
            ax2 = fig.add_subplot(gs[1, 1])
            self._criar_grafico_pizza_ultra_profissional(fig, ax2, df_geral)
            
            # Gr√°fico 3: Top motoristas (esquerda meio)
            ax3 = fig.add_subplot(gs[2, 0])
            self._criar_grafico_motoristas_ultra_profissional(fig, ax3, df_geral)
            
            # Gr√°fico 4: Tipos por motorista (direita meio)
            ax4 = fig.add_subplot(gs[2, 1])
            self._criar_grafico_tipos_motoristas_ultra_profissional(fig, ax4, df_geral)
            
            # NOVO GR√ÅFICO 5: An√°lise temporal (parte inferior - ocupando toda a largura)
            ax5 = fig.add_subplot(gs[3, :])
            self._criar_grafico_temporal_ultra_profissional(fig, ax5, df_geral)
            
            # Salvar na pasta Downloads
            downloads_path = os.path.join(os.path.expanduser("~"), "Downloads")
            caminho_saida = os.path.join(downloads_path, "relatorio_alertas_com_analise_temporal.png")
            
            # Salvar com qualidade ultra alta
            plt.savefig(caminho_saida, 
                       dpi=300, 
                       bbox_inches='tight', 
                       facecolor='white', 
                       edgecolor='none', 
                       format='png',
                       pad_inches=0.3)
            plt.close()
            
            print(f"‚úÖ Gr√°ficos ultra profissionais com an√°lise temporal salvos em: {caminho_saida}")
            
            self._abrir_arquivo(caminho_saida)
            
            return caminho_saida
            
        except Exception as e:
            print(f"‚ùå Erro geral ao gerar gr√°ficos: {e}")
            return None